import csv
import io
import json
from urllib.parse import urlencode

from uw_msca import (
    DAO,
    url_base,
    get_resource,
    get_external_resource,
    put_resource,
)

from uw_msca.models import GoogleDriveState


def get_google_drive_states() -> list[GoogleDriveState]:
    """
    Return list of GoogleDriveState's from report generated by PPLAT.
    """
    drive_state_reports_resp = get_resource(
        url=_get_drivestate_url(),
        headers=_authorization_headers(),
    )

    drive_state_reports_url = json.loads(drive_state_reports_resp)["sasKey"]
    report_resp: bytes = get_external_resource(drive_state_reports_url)

    # wrap encoded bytes such that they can be iterated over per-line
    filelike = io.TextIOWrapper(io.BytesIO(report_resp))
    records = csv.DictReader(filelike)

    result = []

    for record in records:
        result.append(GoogleDriveState.from_csv(record))

    return result


def set_drive_quota(quota: str, drive_id: str):
    """
    Update Google Drive to have the specified quota.
    """
    # in this case quota values are implicitly provided by the
    # Organizational Unit (OU) of the drive
    # so what we're really doing is moving a drive between OUs
    data = {"orgUnit": quota, "driveId": drive_id}

    resp_data = put_resource(
        url=_set_quota_url(),
        body=json.dumps(data),
        headers=_authorization_headers(),
    )

    try:
        # Mike asked for a JSON payload
        return json.loads(resp_data)
    except json.JSONDecodeError:
        # until Ken delivers change
        result = resp_data.decode()
        return {"message": result}


def _set_quota_url():
    return f"{_msca_drive_base_url()}/movedrive"


def _get_drivestate_url():
    return f"{_msca_drive_base_url()}/getfile"


def _msca_drive_base_url():  # returns "/google/v1/drive"
    base = url_base(override="google")
    return f"{base}/drive"


def _authorization_headers():
    """
    Get OAuth bearer token for authorization in subsequent requests.
    """
    data = {
        "client_id": DAO.get_service_setting("CLIENT_ID"),
        "client_secret": DAO.get_service_setting("CLIENT_SECRET"),
        "grant_type": "client_credentials",
        "scope": DAO.get_service_setting("REPORT_SCOPE"),
    }
    body = urlencode(data)

    token_response = get_external_resource(
        DAO.get_service_setting("OAUTH_TOKEN_URL"),
        body=body,
    )
    token = json.loads(token_response)["access_token"]

    auth_headers = {"Authorization": f"Bearer {token}"}

    return auth_headers
