import csv
import io
import json
import os
from urllib.parse import urlencode

from urllib3 import PoolManager
from urllib3.util.retry import Retry

from restclients_core.dao import DAO
from restclients_core.exceptions import DataFailureException
from uw_msca import (
    logger,
    url_base,
)

from uw_msca.models import GoogleDriveState


class MSCA_GDrive_DAO(DAO):
    """
    MSCA client for Google Drive things.
    """

    def service_name(self):
        return 'msca_gdrive'

    def service_mock_paths(self):
        return [os.path.abspath(os.path.join(os.path.dirname(__file__), "resources"))]  # noqa

    # modified to allow a body arg
    def getURL(self, url, headers={}, body=None):
        return self._load_resource("GET", url, headers, body)

    def get_external_resource(self, url, **kwargs):
        http = PoolManager(
            retries=Retry(total=1, connect=0, read=0, redirect=1))
        return http.request('GET', url, **kwargs)


DAO = MSCA_GDrive_DAO()


# copy/pasted from __init__ to use the correct DAO global
# updated to include headers arg
def get_resource(url, headers=None):
    default_headers = {'Accept': 'application/json'}
    if headers:
        default_headers.update(headers)

    response = DAO.getURL(url, default_headers)
    logger.debug("GET {0} ==status==> {1}".format(url, response.status))
    if response.status != 200:
        raise DataFailureException(url, response.status, response.data)

    logger.debug("GET {0} ==data==> {1}".format(url, response.data))

    return response.data


# copy/pasted from __init__ to use the correct DAO global
# updated to include kwargs (body)
def get_external_resource(url, **kwargs):
    response = DAO.get_external_resource(url, **kwargs)

    logger.debug(
        "external_resource {0} ==status==> {1}".format(url, response.status))

    if response.status != 200:
        raise DataFailureException(url, response.status, response.data)

    logger.debug(
        "external_resource {0}s ==data==> {1}".format(url, response.data))

    return response.data


def put_resource(url, body, headers=None):
    default_headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    if headers:
        default_headers.update(headers)

    response = DAO.putURL(
        url,
        default_headers,
        body,
    )
    logger.debug("PUT {0} ==status==> {1}".format(url, response.status))

    if response.status != 200:
        raise DataFailureException(url, response.status, response.data)

    logger.debug("PUT {0}s ==data==> {1}".format(url, response.data))

    return response.data


def get_google_drive_states() -> list[GoogleDriveState]:
    """
    Return list of GoogleDriveState objects from most recent report generated by PPLAT.
    """
    drive_state_reports_resp = get_resource(
        url=_get_drivestate_url(),
        headers=_authorization_headers(),
    )

    drive_state_reports_url = json.loads(drive_state_reports_resp)["sasKey"]
    report_resp: bytes = get_external_resource(drive_state_reports_url)

    # wrap encoded bytes such that they can be iterated over on a line-by-line-basis
    filelike = io.TextIOWrapper(io.BytesIO(report_resp))
    records = csv.DictReader(filelike)

    result = []

    for record in records:
        result.append(GoogleDriveState.from_csv(record))

    return result


def set_drive_quota(quota: str, drive_id: str):
    """
    Update Google Drive to have the specified quota.
    """
    # in this case quota values are implicitly provided by the
    # Organizational Unit (OU) of the drive
    # so what we're really doing is moving a drive between OUs
    data = {"orgUnit": quota, "driveId": drive_id}

    resp_data = put_resource(
        url=_set_quota_url(),
        body=json.dumps(data),
        headers=_authorization_headers(),
    )

    try:
        # Mike asked for a JSON payload
        return json.loads(resp_data)
    except json.JSONDecodeError:
        print("NO JSON YET")
        # until Ken delivers
        return resp_data.decode()


def _set_quota_url():
    return f"{_msca_drive_base_url()}/movedrive"


def _get_drivestate_url():
    return f"{_msca_drive_base_url()}/getfile"


def _msca_drive_base_url():  # returns "/drive"
    base = url_base(override="drive")
    return base


def _authorization_headers():
    """
    Get OAuth bearer token for authorization in subsequent requests.
    """
    data = {
        "client_id": DAO.get_service_setting("CLIENT_ID"),
        "client_secret": DAO.get_service_setting("CLIENT_SECRET"),
        "grant_type": "client_credentials",
        "scope": DAO.get_service_setting("REPORT_SCOPE"),
    }
    body = urlencode(data)

    token_response = get_external_resource(
        DAO.get_service_setting("OAUTH_TOKEN_URL"),
        body=body,
    )
    token = json.loads(token_response)["access_token"]

    auth_headers = {"Authorization": f"Bearer {token}"}

    return auth_headers
